package ch7;

/**
 * ********************
 *        继承        *
 * ********************
 * 继承的设计思想:
 * 辨别出所有对象共有的特征
 * 然后以这些共同的特征设计出能够让所有对象<具体的>加以扩充的类<抽象的>
 *
 * 具体做法:
 * 1.找出具有共同属性和行为的对象
 * 2.设计代表共同状态与行为的类<抽象的类-父类>
 * 3.决定子类是否需要让某项行为有特定不同的运作方式(仅重写父类方法,<覆盖，重载>)<具体的类-子类>
 * 4.通过寻找使用共同行为的子类来找出更多抽象化的机会<具体子类-可否再次提炼抽象父类>
 * 5.完成类的继承层次
 *
 * 判断是否是继承关系
 * IS-A
 * 三角形是一个多边形
 *
 * 存取权限:
 * 对于编写出坚固，设计良好的java程序<非常重要>
 * 父类可以通过存取权限决定子类是否能够继承特定的成员
 * private->default->protected->public <权限等级变低>
 *
 * 继承的意义
 * 1.避免重复的程序代码
 * 2.定义出共同协议，累计面向对象经验
 *
 * 三种方法防止某个类被作为子类
 * 1.非共有<不存在私有类>的类只能被同一个包的类作为子类
 * 2.final<确保安全用>修饰的类，表示继承树的末端
 * 3.让类只拥有private的构造程序(ch9)
 *
 * ********************
 *         多态       *
 * ********************
 * 通过多态，你就可以编写出引进新型子类时也不必修改的程序
 * class Vet{
 *     public void giveShot(Animal a){
 *         a.maakeNoise()
 *     }
 * }
 *
 * 一般情况
 * 对象声明创建赋值
 * 需要保证引用类型和对象类型必须相符
 * Dog myDog=new Dog()
 * 而多态可以这样,其中引用类型是实际对象类型的父类
 * Animal myDog=new Dog()
 *
 * Animal[] animals=new Animal[5]
 * animals[0]=new Dog();
 * animals[1]=new Cat();
 *
 * ******************
 *      覆盖和重载   *
 * ******************
 * 覆盖：方法名称，参数，返回值相同<协议>
 * 重载：方法名称相同，参数不同，和多态无关
 */
public class Demo {

}